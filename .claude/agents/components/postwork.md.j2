## Post-work: Reporting & Documentation

### Learning from Memory

{% include "components/memory-usage.md.j2" %}

---

### 1. Save Detailed Worklog
Create/update `worklog.md` with:
```markdown
# Worklog ‚Äî {{ meta.name }}

## Task
{{ task_description }}

## Steps Taken
1. Step 1: Description + time
2. Step 2: Description + time
3. Step 3: Description + time

## Decisions Made
- Decision 1: Rationale
- Decision 2: Rationale

## Issues Encountered
- Issue 1: Description + resolution
- Issue 2: Description + resolution (or workaround)

## Artifacts Created
- file1.py ‚Üí purpose
- file2.md ‚Üí purpose

## Tests Run
- Test suite X: PASS
- Test suite Y: PASS (N failures noted)

## What Worked Well
- Approach worked for...
- This technique was efficient...

## What Could Improve
- Next time try...
- Consider...

## Time Breakdown
- Planning: 5 min
- Implementation: 30 min
- Testing: 10 min
- Documentation: 5 min
- Total: 50 min
```

### 2. Save Concise Summary
Create `summary.md` with max 5 lines:
```markdown
# Summary ‚Äî {{ task_name }}

‚úì Task completed successfully
- Created: file1.py, file2.py (2 artifacts)
- Tests: 45/45 passing
- Next: Merge to main, deploy to staging
```

### 3. Update Agent Memory (If Real Learning)

**Only add if REUSABLE - don't pollute memory with noise!**

Location: `.claude/memory/agents/{{ meta.name }}/`

**Update when you discover:**
- ‚úÖ **New skill** ‚Üí `skills.md` - Technique that works
- ‚úÖ **Known issue** ‚Üí `issues.md` - Problem + solution for future
- ‚úÖ **Pattern** ‚Üí `patterns.md` - Effective approach
- ‚úÖ **Insight** ‚Üí `notes.md` - Valuable observation

**Don't add:**
- ‚ùå Obvious info (already in docs)
- ‚ùå One-off hacks (not reusable)
- ‚ùå Noise (pollutes system)

**Format:**

```markdown
## Skill/Pattern/Issue Name

**When to use:** [conditions]

**Description:** [how/what/why]

**Code/Example:**
[if applicable]

**Discovered:** [date], Context: [task]
```

**Also consider:**
- Move to `.claude/memory/shared/` if applicable to other agents
- Link back to this worklog for reference

---

### 4. Save Agent Report

{% include "components/agent-reports.md.j2" %}

---

### 5. Return Status Report

Format:
```markdown
## Status Report

**Status:** success | fail | partial | blocked

**Output:**
- Artifacts: list what was created
- Location: where they are (workdir path)
- Tests: pass/fail counts

**Next Step:**
- If success: what should happen next
- If fail: what needs to happen next
- If blocked: what's blocking + recommendation

**Issues:**
- List any outstanding issues
- Document workarounds used
- Flag anything needing manual review
```

### Status Report Format

**Concise format (report to orchestrator):**

```markdown
## Status Report

**Status:** success | fail | partial | blocked

**Output:**
- Artifacts: list what was created
- Location: where they are (workdir path)
- Tests: pass/fail counts

**Next Step:**
- If success: what should happen next
- If fail: what needs to happen next
- If blocked: what's blocking + recommendation

**Issues:**
- List any outstanding issues
- Document workarounds used
- Flag anything needing manual review
```

### Status Values

#### ‚úÖ SUCCESS
- All success criteria met
- All tests passing
- Artifacts delivered
- Ready for next phase

#### ‚ö† PARTIAL
- Most criteria met
- Some tests failing (documented)
- Core artifacts ready
- Known workarounds in place

#### ‚ùå FAIL
- Criteria not met
- Critical errors
- Cannot proceed without fixes
- Recommend restart or replan

#### üö´ BLOCKED
- Cannot proceed further
- External dependency missing
- Requires human decision
- Escalate with recommendation

### Example Report

```markdown
## Status Report

**Status:** success

**Output:**
- Artifacts: user-auth-controller.py, user-model.py, tests/
- Location: workdir/src/
- Tests: 32/32 passing

**Next Step:**
Integration testing with database layer. Ready for /implement_this next phase.

**Issues:**
None. All documented requirements met.
```
